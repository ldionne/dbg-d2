// Copyright Edd Dawson 2012
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef CONFIG_HPP_1358_23062012
#define CONFIG_HPP_1358_23062012


#if defined(_MSC_VER)

#   define DBG_FUNCTION __FUNCSIG__
#   define DBG_NEVER_INLINE __declspec(noinline)
#   define DBG_DOESNT_RETURN __declspec(noreturn)

#elif defined(__GNUC__)

#   define DBG_FUNCTION __PRETTY_FUNCTION__
#   define DBG_NEVER_INLINE __attribute__((noinline))
#   define DBG_DOESNT_RETURN __attribute__((noreturn))

#else

#   define DBG_FUNCTION "?"
#   define DBG_NEVER_INLINE
#   define DBG_DOESNT_RETURN

#endif

#define DBG_TOKEN_JOIN_IMPL(a, b) a ## b
#define DBG_TOKEN_JOIN(a, b) DBG_TOKEN_JOIN_IMPL(a, b)

#if defined(__COUNTER__)
#   define DBG_UNIQUENESS_TOKEN DBG_TOKEN_JOIN(__COUNTER__, DBG_TOKEN_JOIN(_on_line_, __LINE__))
#else
#   define DBG_UNIQUENESS_TOKEN DBG_TOKEN_JOIN(on_line_, __LINE__)
#endif


// To decide whether assertions are enabled, we follow the standard assert() macro
// convention of disabling asserts when NDEBUG is defined.
// However, we'll also check DBG_ENABLE_ASSERT and DBG_DISABLE_ASSERT as
// overrides.
// Ultimately, the definitions of the dbg assertions are dependent on whether or not
// DBG_ENABLE_ASSERT is defined.

#if !defined(DBG_ENABLE_ASSERT)
#   if !defined(NDEBUG) && !defined(DBG_DISABLE_ASSERT)
#       define DBG_ENABLE_ASSERT 1
#   endif
#else
#   if defined(DBG_DISABLE_ASSERT)
#      error "Both DBG_ENABLE_ASSERT and DBG_DISABLE_ASSERT are defined"
#   endif
#endif

// A similar system for enabling/disabling exception logging in DBG_THROW().

#if !defined(DBG_ENABLE_EXCEPTION_LOG)
#   if !defined(NDEBUG) && !defined(DBG_DISABLE_EXCEPTION_LOG)
#       define DBG_ENABLE_EXCEPTION_LOG 1
#   endif
#else
#   if defined(DBG_DISABLE_EXCEPTION_LOG)
#       error "Both DBG_ENABLE_EXCEPTION_LOG and DBG_DISABLE_EXCEPTION_LOG are defined"
#   endif
#endif

// A similar system for enabling/disabling notes generated by DBG_NOTE().

#if !defined(DBG_ENABLE_NOTE)
#   if !defined(NDEBUG) && !defined(DBG_DISABLE_NOTE)
#       define DBG_ENABLE_NOTE 1
#   endif
#else
#   if defined(DBG_DISABLE_NOTE)
#       error "Both DBG_ENABLE_NOTE and DBG_DISABLE_NOTE are defined"
#   endif
#endif

// A similar system for enabling/disabling logging of unusual conditions with DBG_UNUSUAL().

#if !defined(DBG_ENABLE_UNUSUAL)
#   if !defined(NDEBUG) && !defined(DBG_DISABLE_UNUSUAL)
#       define DBG_ENABLE_UNUSUAL 1
#   endif
#else
#   if defined(DBG_DISABLE_UNUSUAL)
#       error "Both DBG_ENABLE_UNUSUAL and DBG_DISABLE_UNUSUAL are defined"
#   endif
#endif

#endif // CONFIG_HPP_1358_23062012
